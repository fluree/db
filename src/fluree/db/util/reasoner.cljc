(ns fluree.db.util.reasoner
  (:require [fluree.db.flake :as flake]
            [fluree.db.json-ld.iri :as iri]))

(defn reasoned-rule?
  "Returns truthy if the flake has been generated by reasoner"
  [flake]
  (-> flake meta :reasoned))

(defn non-reasoned-flakes
  "Takes a sequence of flakes and removes any flakes which are reasoned.

  This is primarily used to remove reasoned flakes from commits."
  [flakes]
  (remove reasoned-rule? flakes))

(defn- reasoned-flakes
  "Takes a sequence of flakes and keeps only reasoned flakes"
  [flakes]
  (filter reasoned-rule? flakes))

(defn- reasoned-flake->fact
  [db f]
  (let [s (iri/decode-sid db (flake/s f))
        p (iri/decode-sid db (flake/p f))
        o (as-> (flake/o f) o
            (if (iri/sid? o)
              (iri/decode-sid db o)
              o))
        r (-> f meta :reasoned)]
    [s p o r]))

(defn reasoned-facts
  [db]
  (->> (-> db :novelty :spot)
       reasoned-flakes
       (mapv (partial reasoned-flake->fact db))))
